/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    alias(libs.plugins.jib)
    alias(libs.plugins.kotlin.jvm)
    alias(libs.plugins.kotlin.serialization)
    alias(libs.plugins.nebula.ospackage)
    alias(libs.plugins.nebula.ospackage.application)
    alias(libs.plugins.ktlint)
    alias(libs.plugins.detekt)
    alias(libs.plugins.shadow)
    alias(libs.plugins.kover)
}


apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'

group 'org.apache.cassandra'

application {
    applicationName = "cassandra-easy-stress"
    mainClassName = "org.apache.cassandra.easystress.MainKt"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation libs.jcommander
    implementation libs.commons.text
    implementation libs.commons.math3

    // Java driver v4
    implementation libs.cassandra.driver.core
    implementation libs.jackson.module.kotlin

    implementation libs.reflections

    // Logging
    implementation libs.log4j.api
    implementation libs.log4j.core
    implementation libs.log4j.api.kotlin
    implementation libs.kotlin.reflect
    // maps the datastax driver slf4j calls to log4j
    implementation libs.log4j.slf4j18.impl

    // needed for yaml logging configurations
    implementation libs.jackson.databind
    implementation libs.jackson.dataformat.yaml

    // Metrics
    implementation libs.dropwizard.metrics.core
    implementation libs.prometheus.simpleclient
    implementation libs.prometheus.simpleclient.dropwizard
    implementation libs.prometheus.simpleclient.httpserver

    implementation libs.guava
    implementation libs.mordant
    implementation libs.progressbar
    implementation libs.hdrhistogram
    implementation libs.agrona // can't use the 2.x or 1.23+ line as it requires JDK 17

    // Parquet support
    implementation libs.parquet.hadoop
    implementation libs.hadoop.common
    implementation libs.hadoop.mapreduce.client.common

    // MCP Server dependencies
    implementation (libs.mcp.sdk) {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    implementation (libs.ktor.server.core) {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    implementation (libs.ktor.server.cio) {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    implementation (libs.ktor.server.content.negotiation) {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    implementation (libs.ktor.serialization.kotlinx.json) {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    implementation (libs.ktor.server.sse) {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    // Test dependencies
    testImplementation libs.junit.jupiter.engine
    testImplementation libs.junit.jupiter.params
    testImplementation libs.assertj.core
    testImplementation libs.kotlin.test.junit
    testImplementation libs.mockk
    testImplementation libs.kotlinx.coroutines.test

}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
}
compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
}

sourceSets {
    main.java.srcDirs += "src/main/kotlin"
    test.java.srcDirs += "src/test/kotlin"
}

test {
    useJUnitPlatform()
}

task docs(type:Exec) {
    dependsOn("shadowJar")
    dependsOn("generateExamples")

    environment "CASSANDRA_EASY_STRESS_VERSION", "${version}"
    commandLine 'docker-compose', 'up', 'docs'
    group = "Documentation"
    description = "Build website documentation"
}

task generateExamples(type: Exec) {
    dependsOn("shadowJar")
    commandLine "manual/generate_examples.sh"
    group = "Documentation"
    description = "Generate examples for documentation"
}

task dockerBuild(type: Exec) {
    group = "build"
    description = "Build docker image via buildx with optional registry and buildx overrides"

    // Allow overriding via command line: -PdockerRegistry=ghcr.io -PdockerBuildxOptions="--platform linux/amd64"
    def registry = (project.findProperty("dockerRegistry") ?: "ghcr.io")
    def repository = (project.findProperty("dockerRepository") ?: "apache/${application.applicationName}")

    def versionTag = (project.version?.toString() ?: "")
    if (!versionTag || versionTag.length() < 1) {
        versionTag = "latest"
    }

    def image = "${registry}/${repository}:${versionTag}"
    def buildxOptions = (project.findProperty("dockerBuildxOptions") ?: "")

    def command = ["docker", "buildx", "build", "--build-arg", "VERSION=${versionTag}", "-t", image]
    if (!buildxOptions.isEmpty()) {
        command.addAll(buildxOptions.split("\\s+"))
    }
    command.add(".")
    command.add("--load")

    commandLine command
}

jib {
    to {
        image = "rustyrazorblade/cassandra-easy-stress"
        tags = [version, "latest"]
    }
}

ospackage {
    os = LINUX
    link("/usr/local/bin/cassandra-easy-stress", "/opt/cassandra-easy-stress/bin/cassandra-easy-stress" )
    packager "Jon Haddad"
    maintainer "Jon Haddad"
    vendor "Rustyrazorblade Consulting"
    url "http://rustyrazorblade.com/cassandra-easy-stress/"
    license "Apache License 2.0"
    description "Stress Tool for Apache Cassandra by Rustyrazorblade Consulting"
}

buildDeb {
    distribution "weezy,bionic,xenial,jessie"
    requires("openjdk-8-jre")
    group = "build"
}

buildRpm {
    requires("java-1.8.0-openjdk")
    user "root"
    group = "build"
}

task buildAll {
    group = "build"
    dependsOn "buildDeb"
    dependsOn "buildRpm"
    dependsOn "distTar"
}

tasks.distTar {
    compression = Compression.GZIP
    archiveExtension.set("tar.gz")
}

assemble.mustRunAfter clean

applicationDistribution.from("LICENSE.txt") {
    into ""
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

detekt {
    toolVersion = "1.23.7"
    source = files("src/main/kotlin", "src/test/kotlin")
    parallel = true
    config = files("$projectDir/detekt-config.yml")
    buildUponDefaultConfig = true
    allRules = false
    baseline = file("$projectDir/detekt-baseline.xml")
    disableDefaultRuleSets = false
    debug = false
    ignoreFailures = false
    ignoredBuildTypes = ["release"]
    ignoredFlavors = ["production"]
    ignoredVariants = ["productionRelease"]
    autoCorrect = false
}
